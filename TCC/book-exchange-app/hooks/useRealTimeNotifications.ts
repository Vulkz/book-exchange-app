/**
 * =====================================================
 * HOOK DE NOTIFICA√á√ïES EM TEMPO REAL - BOOKEXCHANGE
 * Gerencia notifica√ß√µes do usu√°rio com atualiza√ß√µes em tempo real
 * =====================================================
 */

import { useState, useEffect } from 'react'
import { supabase } from '@/lib/supabase/client'

/**
 * Interface para estrutura de notifica√ß√µes do sistema
 * Define o formato padr√£o de todas as notifica√ß√µes
 */
export interface Notification {
  /** ID √∫nico da notifica√ß√£o */
  id: string
  
  /** ID do usu√°rio que receber√° a notifica√ß√£o */
  user_id: string
  
  /** Tipo da notifica√ß√£o - determina o comportamento e estilo */
  type: 'book_request' | 'request_accepted' | 'request_rejected' | 'new_request'
  
  /** T√≠tulo principal da notifica√ß√£o */
  title: string
  
  /** Mensagem detalhada da notifica√ß√£o */
  message: string
  
  /** Indica se a notifica√ß√£o foi lida pelo usu√°rio */
  read: boolean
  
  /** Data/hora de cria√ß√£o da notifica√ß√£o */
  created_at: string
  
  /** Dados adicionais espec√≠ficos do tipo de notifica√ß√£o */
  data?: {
    request_id?: string
    book_id?: string
    requester_id?: string
    requester_name?: string
    owner_message?: string
  }
}

/**
 * Hook para gerenciar notifica√ß√µes em tempo real
 * 
 * Funcionalidades:
 * - Busca notifica√ß√µes iniciais do usu√°rio
 * - Monitora novas notifica√ß√µes via WebSocket
 * - Controla contador de n√£o lidas
 * - Permite marcar como lida/n√£o lida
 * - Gerencia loading states
 * 
 * @param userId ID do usu√°rio para filtrar notifica√ß√µes
 * @returns Objeto com notifica√ß√µes, fun√ß√µes de controle e estados
 * 
 * @example
 * ```typescript
 * function NotificationCenter() {
 *   const { notifications, unreadCount, markAsRead } = useRealTimeNotifications(user?.id)
 *   
 *   return (
 *     <div>
 *       <h3>Notifica√ß√µes ({unreadCount})</h3>
 *       {notifications.map(notification => (
 *         <div key={notification.id} onClick={() => markAsRead(notification.id)}>
 *           {notification.title}
 *         </div>
 *       ))}
 *     </div>
 *   )
 * }
 * ```
 */
export function useRealTimeNotifications(userId?: string) {
  // =====================================================
  // ESTADOS LOCAIS COM PERSIST√äNCIA
  // =====================================================
  
  /** Lista de todas as notifica√ß√µes do usu√°rio */
  const [notifications, setNotifications] = useState<Notification[]>(() => {
    // Tentar carregar do localStorage como fallback
    if (typeof window !== 'undefined' && userId) {
      try {
        const cached = localStorage.getItem(`notifications_${userId}`)
        return cached ? JSON.parse(cached) : []
      } catch (error) {
        console.warn('Erro ao carregar notifica√ß√µes do cache:', error)
        return []
      }
    }
    return []
  })
  
  /** Contador de notifica√ß√µes n√£o lidas */
  const [unreadCount, setUnreadCount] = useState(() => {
    // Tentar carregar do localStorage como fallback
    if (typeof window !== 'undefined' && userId) {
      try {
        const cached = localStorage.getItem(`unreadCount_${userId}`)
        return cached ? parseInt(cached, 10) : 0
      } catch (error) {
        console.warn('Erro ao carregar contador do cache:', error)
        return 0
      }
    }
    return 0
  })
  
  /** Indica se est√° carregando notifica√ß√µes iniciais */
  const [loading, setLoading] = useState(true)

  // =====================================================
  // PERSIST√äNCIA NO LOCALSTORAGE
  // =====================================================
  
  // Salvar notifica√ß√µes no localStorage sempre que mudarem
  useEffect(() => {
    if (typeof window !== 'undefined' && userId && userId.trim() !== '') {
      try {
        // Sempre salvar, mesmo se a lista estiver vazia (para limpar o cache quando necess√°rio)
        localStorage.setItem(`notifications_${userId}`, JSON.stringify(notifications))
        localStorage.setItem(`unreadCount_${userId}`, unreadCount.toString())
        localStorage.setItem(`notifications_lastUpdate_${userId}`, Date.now().toString())
        
        console.log('üíæ Notifica√ß√µes salvas no cache:', {
          userId,
          count: notifications.length,
          unread: unreadCount
        })
      } catch (error) {
        console.warn('Erro ao salvar notifica√ß√µes no cache:', error)
      }
    }
  }, [notifications, unreadCount, userId])

  // =====================================================
  // BUSCA INICIAL DE NOTIFICA√á√ïES
  // =====================================================
  
  useEffect(() => {
    console.log('üöÄ useRealTimeNotifications - userId recebido:', userId)
    
    // N√£o executar se n√£o tiver userId v√°lido
    if (!userId || userId.trim() === '') {
      console.warn('‚ö†Ô∏è userId inv√°lido ou n√£o fornecido para useRealTimeNotifications')
      setNotifications([])
      setUnreadCount(0)
      setLoading(false)
      return
    }

    // Verificar se j√° temos notifica√ß√µes no cache v√°lidas
    if (typeof window !== 'undefined') {
      try {
        const cached = localStorage.getItem(`notifications_${userId}`)
        const lastUpdate = localStorage.getItem(`notifications_lastUpdate_${userId}`)
        
        if (cached && lastUpdate) {
          const cacheAge = Date.now() - parseInt(lastUpdate)
          const oneMinute = 60 * 1000 // 1 minuto em ms
          
          if (cacheAge < oneMinute) {
            const cachedNotifications = JSON.parse(cached)
            const cachedCount = localStorage.getItem(`unreadCount_${userId}`)
            
            console.log('üì¶ Usando cache v√°lido durante busca inicial:', {
              count: cachedNotifications.length,
              age: Math.round(cacheAge / 1000) + 's'
            })
            
            setNotifications(cachedNotifications)
            setUnreadCount(cachedCount ? parseInt(cachedCount) : 0)
          }
        }
      } catch (error) {
        console.warn('Erro ao carregar cache inicial:', error)
      }
    }

    /**
     * Busca as notifica√ß√µes iniciais do usu√°rio
     * Implementa fallback para compatibilidade com diferentes vers√µes do schema
     */
    const fetchNotifications = async () => {
      try {
        console.log('üì¨ Buscando notifica√ß√µes para usu√°rio:', userId)
        
        // Tentativa principal: buscar todas as colunas
        let { data, error } = await supabase
          .from('notifications')
          .select('*')
          .eq('user_id', userId)
          .order('created_at', { ascending: false })

        // Fallback: se coluna 'read' n√£o existir, buscar sem ela
        if (error && error.message.includes('read')) {
          console.log('‚ö†Ô∏è Coluna "read" n√£o encontrada, usando fallback...')
          const result = await supabase
            .from('notifications')
            .select('id, user_id, type, title, message, created_at, data')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
          
          data = result.data
          error = result.error
        }

        console.log('üìä Resultado da busca:', { total: data?.length || 0, error })

        if (error) {
          console.error('‚ùå Erro ao buscar notifica√ß√µes:', error)
          
          // Tratamento espec√≠fico para erro de coluna inexistente
          if (error.message?.includes('column "read" does not exist')) {
            console.log('üîß Coluna "read" n√£o existe, adaptando consulta...')
            
            const { data: dataWithoutRead, error: errorWithoutRead } = await supabase
              .from('notifications')
              .select('id, user_id, type, title, message, created_at')
              .eq('user_id', userId)
              .order('created_at', { ascending: false })
            
            if (!errorWithoutRead && dataWithoutRead) {
              // Adicionar campo 'read' como false para compatibilidade
              const notificationsWithRead = dataWithoutRead.map(n => ({ 
                ...n, 
                read: false 
              }))
              
              setNotifications(notificationsWithRead)
              setUnreadCount(notificationsWithRead.length)
              
              console.log('‚úÖ Notifica√ß√µes carregadas (modo compatibilidade):', notificationsWithRead.length)
            }
          }
          return
        }
        
        // Processar notifica√ß√µes recebidas com sucesso
        const serverNotifications = data || []
        
        // Verificar se o cache local ainda √© v√°lido (menos de 5 minutos)
        let cachedNotifications: Notification[] = []
        let cachedUnreadCount = 0
        let shouldUseCache = false
        
        if (typeof window !== 'undefined') {
          try {
            const cached = localStorage.getItem(`notifications_${userId}`)
            const cachedCount = localStorage.getItem(`unreadCount_${userId}`)
            const lastUpdate = localStorage.getItem(`notifications_lastUpdate_${userId}`)
            
            if (cached && lastUpdate) {
              const cacheAge = Date.now() - parseInt(lastUpdate)
              const fiveMinutes = 5 * 60 * 1000 // 5 minutos em ms
              
              if (cacheAge < fiveMinutes) {
                cachedNotifications = JSON.parse(cached)
                cachedUnreadCount = cachedCount ? parseInt(cachedCount) : 0
                shouldUseCache = serverNotifications.length === 0 && cachedNotifications.length > 0
              }
            }
          } catch (error) {
            console.warn('Erro ao carregar cache:', error)
          }
        }
        
        // Decidir qual fonte usar
        const finalNotifications = serverNotifications.length > 0 
          ? serverNotifications 
          : shouldUseCache 
            ? cachedNotifications 
            : []
        
        setNotifications(finalNotifications)
        
        // Calcular contador de n√£o lidas
        const finalUnreadCount = finalNotifications.filter(n => !n.read).length
        setUnreadCount(finalUnreadCount)
        
        console.log('‚úÖ Notifica√ß√µes sincronizadas:', {
          servidor: serverNotifications.length,
          cache: cachedNotifications.length,
          useCache: shouldUseCache,
          final: finalNotifications.length,
          unread: finalUnreadCount
        })
      } catch (error) {
        console.error('‚ùå Erro inesperado ao buscar notifica√ß√µes:', error)
      } finally {
        // Sempre parar loading, mesmo em caso de erro
        setLoading(false)
      }
    }

    // Executar busca inicial
    fetchNotifications()
  }, [userId])

  // =====================================================
  // CONFIGURA√á√ÉO DE TEMPO REAL (WEBSOCKET)
  // =====================================================
  
  useEffect(() => {
    // N√£o configurar se n√£o tiver userId v√°lido
    if (!userId || userId.trim() === '') {
      console.warn('‚ö†Ô∏è N√£o configurando listener: userId inv√°lido')
      return
    }

    /**
     * Configura listener em tempo real para novas notifica√ß√µes
     * Monitora inser√ß√µes na tabela 'notifications' via WebSocket
     */
    const channel = supabase
      .channel('notifications')
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'notifications',
        filter: `user_id=eq.${userId}`
      }, (payload) => {
        console.log('üîî Nova notifica√ß√£o recebida:', payload.new)
        
        // Adicionar nova notifica√ß√£o no topo da lista
        const newNotification = payload.new as Notification
        setNotifications(prev => [newNotification, ...prev])
        
        // Incrementar contador de n√£o lidas
        setUnreadCount(prev => prev + 1)
      })
      .on('postgres_changes', {
        event: 'UPDATE',
        schema: 'public',
        table: 'notifications',
        filter: `user_id=eq.${userId}`
      }, (payload) => {
        console.log('üìù Notifica√ß√£o atualizada:', payload.new)
        
        // Atualizar notifica√ß√£o na lista local
        const updatedNotification = payload.new as Notification
        setNotifications(prev => 
          prev.map(n => n.id === updatedNotification.id ? updatedNotification : n)
        )
        
        // Se foi marcada como lida, decrementar contador
        if (updatedNotification.read) {
          setUnreadCount(prev => Math.max(0, prev - 1))
        }
      })
      .subscribe()

    console.log('üì° Listener de tempo real configurado para usu√°rio:', userId)

    // Cleanup: remover channel ao desmontar
    return () => {
      console.log('üßπ Removendo listener de notifica√ß√µes')
      supabase.removeChannel(channel)
    }
  }, [userId])

  // =====================================================
  // LISTENER PARA RECARREGAMENTO MANUAL
  // =====================================================
  
  useEffect(() => {
    if (!userId || userId.trim() === '') return

    const handleRefetchEvent = async () => {
      console.log('üîÑ Evento de refetch recebido')
      
      // Reimplementar a l√≥gica aqui para evitar duplica√ß√£o
      try {
        setLoading(true)
        console.log('üîÑ Recarregando notifica√ß√µes...')
        
        const { data, error } = await supabase
          .from('notifications')
          .select('*')
          .eq('user_id', userId)
          .order('created_at', { ascending: false })

        if (error) throw error
        
        const serverNotifications = data || []
        setNotifications(serverNotifications)
        
        const unreadCount = serverNotifications.filter(n => !n.read).length
        setUnreadCount(unreadCount)
        
        console.log('‚úÖ Notifica√ß√µes recarregadas via evento:', {
          total: serverNotifications.length,
          unread: unreadCount
        })
        
      } catch (error) {
        console.error('‚ùå Erro ao recarregar notifica√ß√µes:', error)
      } finally {
        setLoading(false)
      }
    }

    window.addEventListener('refetch-notifications', handleRefetchEvent)
    
    return () => {
      window.removeEventListener('refetch-notifications', handleRefetchEvent)
    }
  }, [userId])

  // =====================================================
  // FUN√á√ïES P√öBLICAS DE CONTROLE
  // =====================================================

  /**
   * For√ßa o recarregamento das notifica√ß√µes do servidor
   * √ötil para sincronizar ap√≥s navega√ß√£o ou quando h√° problemas de cache
   */
  const refetchNotifications = async () => {
    if (!userId || userId.trim() === '') {
      console.warn('‚ö†Ô∏è N√£o √© poss√≠vel recarregar: usu√°rio n√£o autenticado')
      return
    }

    try {
      setLoading(true)
      console.log('üîÑ Recarregando notifica√ß√µes...')
      
      const { data, error } = await supabase
        .from('notifications')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })

      if (error) throw error
      
      const serverNotifications = data || []
      setNotifications(serverNotifications)
      
      const unreadCount = serverNotifications.filter(n => !n.read).length
      setUnreadCount(unreadCount)
      
      console.log('‚úÖ Notifica√ß√µes recarregadas:', {
        total: serverNotifications.length,
        unread: unreadCount
      })
      
    } catch (error) {
      console.error('‚ùå Erro ao recarregar notifica√ß√µes:', error)
    } finally {
      setLoading(false)
    }
  }

  /**
   * Marca uma notifica√ß√£o espec√≠fica como lida
   * Atualiza tanto o banco quanto o estado local
   * 
   * @param notificationId ID da notifica√ß√£o a ser marcada
   */
  const markAsRead = async (notificationId: string) => {
    // N√£o executar se n√£o estiver autenticado
    if (!userId || userId.trim() === '') {
      console.warn('‚ö†Ô∏è N√£o √© poss√≠vel marcar como lida: usu√°rio n√£o autenticado')
      return
    }

    try {
      console.log('üìñ Marcando notifica√ß√£o como lida:', notificationId)
      
      // Atualizar estado local imediatamente para melhor UX
      setNotifications(prev => 
        prev.map(n => n.id === notificationId ? { ...n, read: true } : n)
      )
      setUnreadCount(prev => Math.max(0, prev - 1))
      
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('id', notificationId)

      if (error) {
        // Tratamento especial para coluna inexistente
        if (error.message?.includes('column "read" does not exist')) {
          console.log('‚ö†Ô∏è Coluna "read" n√£o existe, opera√ß√£o ignorada')
          return
        }
        
        // Reverter mudan√ßa local em caso de erro
        setNotifications(prev => 
          prev.map(n => n.id === notificationId ? { ...n, read: false } : n)
        )
        setUnreadCount(prev => prev + 1)
        
        throw error
      }
      
      console.log('‚úÖ Notifica√ß√£o marcada como lida')
    } catch (error) {
      console.error('‚ùå Erro ao marcar notifica√ß√£o como lida:', error)
      throw new Error('Falha ao marcar notifica√ß√£o como lida')
    }
  }

  /**
   * Marca todas as notifica√ß√µes do usu√°rio como lidas
   * √ötil para bot√£o "marcar todas como lidas"
   */
  const markAllAsRead = async () => {
    if (!userId || userId.trim() === '') {
      console.warn('‚ö†Ô∏è N√£o √© poss√≠vel marcar como lidas: usu√°rio n√£o autenticado')
      return
    }

    try {
      console.log('üìñ Marcando todas as notifica√ß√µes como lidas...')
      
      // Atualizar estado local imediatamente para melhor UX  
      const previousNotifications = notifications
      const previousUnreadCount = unreadCount
      
      setNotifications(prev => prev.map(n => ({ ...n, read: true })))
      setUnreadCount(0)
      
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('user_id', userId)
        .eq('read', false)

      if (error) {
        // Tratamento para coluna inexistente
        if (error.message?.includes('column "read" does not exist')) {
          console.log('‚ö†Ô∏è Coluna "read" n√£o existe, mantendo mudan√ßa local')
          return
        }
        
        // Reverter mudan√ßas locais em caso de erro
        setNotifications(previousNotifications)
        setUnreadCount(previousUnreadCount)
        
        throw error
      }
      
      console.log('‚úÖ Todas as notifica√ß√µes marcadas como lidas')
      
    } catch (error) {
      console.error('‚ùå Erro ao marcar todas como lidas:', error)
      throw new Error('Falha ao marcar todas as notifica√ß√µes como lidas')
    }
  }

  // =====================================================
  // RETORNO DO HOOK
  // =====================================================

  return {
    /** Lista de todas as notifica√ß√µes do usu√°rio (ordenadas por data) */
    notifications,
    
    /** Contador de notifica√ß√µes n√£o lidas */
    unreadCount,
    
    /** Indica se ainda est√° carregando notifica√ß√µes iniciais */
    loading,
    
    /** Fun√ß√£o para marcar uma notifica√ß√£o espec√≠fica como lida */
    markAsRead,
    
    /** Fun√ß√£o para marcar todas as notifica√ß√µes como lidas */
    markAllAsRead,

    /** Fun√ß√£o para for√ßar recarregamento das notifica√ß√µes */
    refetchNotifications
  }
}