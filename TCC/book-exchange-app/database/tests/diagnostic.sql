-- =====================================================
-- TESTE E DIAGN√ìSTICO - BookExchange
-- Execute para verificar se o sistema est√° funcionando corretamente
-- =====================================================

SELECT 'üîç INICIANDO DIAGN√ìSTICO DO SISTEMA BOOKEXCHANGE' as status;

-- =====================================================
-- 1. VERIFICAR ESTRUTURA DAS TABELAS
-- =====================================================
SELECT 'üìã Verificando estrutura das tabelas...' as step;

-- Verificar se todas as tabelas necess√°rias existem
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'profiles') THEN '‚úÖ'
        ELSE '‚ùå'
    END || ' profiles' as table_status
UNION ALL
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'books') THEN '‚úÖ'
        ELSE '‚ùå'
    END || ' books'
UNION ALL
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'meeting_locations') THEN '‚úÖ'
        ELSE '‚ùå'
    END || ' meeting_locations'
UNION ALL
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'requests') THEN '‚úÖ'
        ELSE '‚ùå'
    END || ' requests'
UNION ALL
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'notifications') THEN '‚úÖ'
        ELSE '‚ùå'
    END || ' notifications';

-- =====================================================
-- 2. VERIFICAR COLUNAS CR√çTICAS
-- =====================================================
SELECT 'üîß Verificando colunas cr√≠ticas...' as step;

-- Verificar coluna read na tabela notifications
SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = 'notifications' 
            AND column_name = 'read'
        ) THEN '‚úÖ notifications.read existe'
        ELSE '‚ùå notifications.read AUSENTE'
    END as column_check
UNION ALL
-- Verificar coluna data na tabela notifications
SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = 'notifications' 
            AND column_name = 'data'
        ) THEN '‚úÖ notifications.data existe'
        ELSE '‚ö†Ô∏è notifications.data ausente (opcional)'
    END;

-- =====================================================
-- 3. VERIFICAR POL√çTICAS RLS
-- =====================================================
SELECT 'üîí Verificando pol√≠ticas RLS...' as step;

-- Contar pol√≠ticas por tabela
SELECT 
    tablename,
    COUNT(*) as total_policies
FROM pg_policies 
WHERE tablename IN ('profiles', 'books', 'meeting_locations', 'requests', 'notifications')
GROUP BY tablename
ORDER BY tablename;

-- =====================================================
-- 4. VERIFICAR √çNDICES
-- =====================================================
SELECT 'üìä Verificando √≠ndices...' as step;

SELECT 
    schemaname,
    tablename,
    indexname
FROM pg_indexes 
WHERE tablename IN ('profiles', 'books', 'meeting_locations', 'requests', 'notifications')
AND schemaname = 'public'
ORDER BY tablename, indexname;

-- =====================================================
-- 5. CONTAR DADOS EXISTENTES
-- =====================================================
SELECT 'üìà Verificando dados existentes...' as step;

SELECT 
    'profiles' as tabela,
    COUNT(*) as total_registros
FROM public.profiles
UNION ALL
SELECT 
    'books',
    COUNT(*)
FROM public.books
UNION ALL
SELECT 
    'meeting_locations',
    COUNT(*)
FROM public.meeting_locations
UNION ALL
SELECT 
    'requests',
    COUNT(*)
FROM public.requests
UNION ALL
SELECT 
    'notifications',
    COUNT(*)
FROM public.notifications;

-- =====================================================
-- 6. VERIFICAR √öLTIMAS ATIVIDADES
-- =====================================================
SELECT 'üïê Verificando √∫ltimas atividades...' as step;

-- √öltimos 5 livros adicionados
SELECT 'üìö √öltimos livros:' as info;
SELECT 
    title,
    author,
    category,
    created_at
FROM public.books 
ORDER BY created_at DESC 
LIMIT 5;

-- √öltimas 5 solicita√ß√µes
SELECT 'üìù √öltimas solicita√ß√µes:' as info;
SELECT 
    r.status,
    r.message,
    r.created_at,
    b.title as livro
FROM public.requests r
LEFT JOIN public.books b ON r.book_id = b.id
ORDER BY r.created_at DESC 
LIMIT 5;

-- √öltimas 5 notifica√ß√µes
SELECT 'üîî √öltimas notifica√ß√µes:' as info;
SELECT 
    type,
    title,
    read,
    created_at
FROM public.notifications 
ORDER BY created_at DESC 
LIMIT 5;

-- =====================================================
-- 7. TESTE DE FUNCIONALIDADES CR√çTICAS
-- =====================================================
SELECT 'üß™ Testando funcionalidades cr√≠ticas...' as step;

-- Verificar se √© poss√≠vel fazer join entre as tabelas principais
SELECT 'üîó Teste de relacionamentos:' as test;
SELECT 
    COUNT(*) as books_with_owners,
    'books com profiles' as relationship
FROM public.books b
INNER JOIN public.profiles p ON b.owner_id = p.id
UNION ALL
SELECT 
    COUNT(*),
    'meeting_locations com books'
FROM public.meeting_locations ml
INNER JOIN public.books b ON ml.book_id = b.id
UNION ALL
SELECT 
    COUNT(*),
    'requests com todas as refer√™ncias'
FROM public.requests r
INNER JOIN public.profiles p1 ON r.requester_id = p1.id
INNER JOIN public.profiles p2 ON r.owner_id = p2.id
INNER JOIN public.books b ON r.book_id = b.id;

-- =====================================================
-- 8. VERIFICAR INTEGRIDADE REFERENCIAL
-- =====================================================
SELECT 'üîó Verificando integridade referencial...' as step;

-- Verificar se h√° livros sem dono
SELECT 
    CASE 
        WHEN COUNT(*) = 0 THEN '‚úÖ Todos os livros t√™m propriet√°rios v√°lidos'
        ELSE '‚ùå ' || COUNT(*) || ' livros com propriet√°rios inv√°lidos'
    END as integrity_check
FROM public.books b
LEFT JOIN public.profiles p ON b.owner_id = p.id
WHERE p.id IS NULL;

-- Verificar se h√° solicita√ß√µes com refer√™ncias inv√°lidas
SELECT 
    CASE 
        WHEN COUNT(*) = 0 THEN '‚úÖ Todas as solicita√ß√µes t√™m refer√™ncias v√°lidas'
        ELSE '‚ùå ' || COUNT(*) || ' solicita√ß√µes com refer√™ncias inv√°lidas'
    END as integrity_check
FROM public.requests r
LEFT JOIN public.profiles p1 ON r.requester_id = p1.id
LEFT JOIN public.profiles p2 ON r.owner_id = p2.id
LEFT JOIN public.books b ON r.book_id = b.id
WHERE p1.id IS NULL OR p2.id IS NULL OR b.id IS NULL;

-- =====================================================
-- RESULTADO FINAL
-- =====================================================
SELECT 'üéâ DIAGN√ìSTICO CONCLU√çDO!' as status;
SELECT 'üìä Verifique os resultados acima para identificar poss√≠veis problemas.' as info;